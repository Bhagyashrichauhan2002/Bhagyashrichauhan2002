{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\f0\fs56\lang9 software testing assignment\par
module 1\par
(fundamental)\par
\par

\pard\sa200\sl276\slmult1\fs36 1. What is SDLC?\par
The fullform of SDLC is Software Development Life Cycle.SDLC is the process for planning,inplimentation,testing,documentation,deployment and ongoing maintainence and support.\par
\par
2.What is software testing?\fs56\par
\fs36 Software testing is the process for indentifing the correctness,completeness and quality of development computer software.\par
\par
3.What is agile methedology?\par
Agile mmthedology is the a way to manage a project by breakimg it up into several phases.\par
\par
4.What is SRS?\par
Software requirement specification is a cmplate description of the behaviour of the system to be developed.\par
\par
5.What is OOPS?\par
Object oriented programming is a core of java programming , which is used for designing a program using classes and objects.\par
\par
6.Write a basic concept of OOPS.\par
OOPS is an approach or a programming pattern where the programs are structured around objects rather than functions and logic.it makes the data partitioned into two memory areas.\par
\par
7.What is object?\par
object is anything to which concept applies.\par
\par
8.What is class?\par
A blueprint for an object is called class.\par
\par
9.What is encapsulation?\par
Encapsulation is the practice of including in an object everything needs hidden from other objects.\par
\par
10.What is inheritance?\par
Inheritence means that one class inherits the characterastics of other class.This is also called a " is a" relationship.\par
\par
11.What is polymorphism?\par
The ability to change form is known as polymorphism.\par
\par
12.Write SDLC phases with basic introduction.\par
SDLC fullform is sofware development life cycle.This is the process for planning, implimenting,testing,documentation and ongoing maintainace and support.\par
\b SDLC phases\par
\b0 Requirement collection:   estblishing customer needs\par
Analysis                              :    model and specify the\par
                                                   requiremnt "What"\par
Design                                 :    model and specify a solution \par
                                                    "Why"\par
Implementation               :    construct a solution is software\par
Testing                                 :    validate the solution against\par
                                                    the requirements.\par
Maintainance                    :    repair defect and adopt the \par
                                                     solution to the new requirents\par
\par
13.Explain phases  of the Waterfall model.\par
\b Requirement gathering and analysis\b0 : All possible requirents for the system to be developed are captured in this phase and documented in a requiment specification document.\par
\b System design\b0 : the requirement  specifications from first hase are studied in this phase and the system design is prepered. this system design helps in specifying hardware and system requirements and help in definig the overall system architecture.\par
\b Implementation\b0 : all the units deeveloped in the implementation phase are intergrated into a system after testing of each unit.post integration the entiore system is tested for any faults and failures.\par
\b Integration and teesting\b0 : all the units developed in the implementation phase are integrated into a system after testing of each unit.post  integration the entire system is tested for any faults and failures.\par
\b Deployment sstem\b0 : once the functional testing is done the product is deployed in the cuteomer environment or released into the market.\par
\b Mintainance:\b0 there are some issues which come up in the client environment.to fix those issues patches are released.also to enhance the product some better versions sre realised. maintenance is done to deliver these changes in the customer environment.\par
\par
14.Write phases of spiral model.\par
\b Determine objectives and find alternate solutions \b0\f1\endash  This phase includes requirement gathering and analysis. Based on the requirements, objectives are defined and different alternate solutions are proposed.\par
\b\par
Risk Analysis and resolving \b0\endash  In this quadrant, all the proposed solutions are analyzed and any potential risk is identified, analyzed, and resolved.\par
\par
\b Develop and test\b0 : This phase includes the actual implementation of the different features. All the implemented features are then verified with thorough testing.\par
\par
\b Review and planning of the next phase \b0\endash  In this phase, the software is evaluated by the customer. It also includes risk identification and monitoring like cost overrun or schedule slippage and after that planning of the next phase is started.\par
\par
\f0\lang1033 15.Write agile manifesto principles.\par
\lang9  \b Customer satisfaction through early and continuous software delivery \b0\f1\endash\par
Customers are happier when they receive working software at regular intervals,rather thanwaitingextended periodsof time betweenreleases.\par
\f0  \b Accommodate changing requirementsthroughoutthedevelopmentprocess \b0\f1\endash\par
\f0\lang1033   The ability to avoit delay when arequirements or features request changes.\f1\lang9\par
\f0  \b Frequentdeliveryof working software\b0\f1\endash  Scrumaccommodatesthisprinciplesince the\par
team operates in software sprints or iterations that ensure regular delivery of working\par
software.\par
\f0  \b Collaboration between thebusinessstakeholdersand developersthroughoutthe project\par
 \b0 d\f1 cisionsaremadewhen the businessand technical teamarealigned.\par
\f0  \b Support, trust, and motivate thepeople involved \b0\f1 Motivated teamsare more likely \par
todelivertheirbestwork than unhappyteams.\par
\b\f0  Working softwareistheprimarymeasureof progress\b0\f1\par
Delivering functional\par
softwareto thecustomeristheultimatefactorthatmeasuresprogress.\par
\b\f0  Agile processes to support a consistent development pace\par
 \b0\f1  Teams establish arepeatable and maintainable speed at which they can deliver working software, and\par
they repeat itwitheach release.\par
\f0  \b Attentionto technical detail and designenhancesagility \b0\f1 The rightskillsand good\par
design ensures the team can maintain the pace, constantly improve the product, and\par
sustainchange.\par
\f0  \b Simplicity\b0\f1\endash  Developjustenough toget the jobdone forright now.\par
\f0  \b Self-organizing teamsencourage greatarchitectures, requirements, and designs \b0\f1\endash\par
Skilled and motivated teammemberswho havedecision-making power,takeownership,\par
communicate regularly with other team members, and share ideas that deliver quality\par
products.\par
\f0  \b Regularreflectionson how to becomemoreeffective \b0\f1\endash  Self-improvement, process\par
improvement, advancingskills, and techniques help team memberswork more\f0\lang1033  effecient.\par
\par
15.Explain woeking methedology of agile model and also write pros and cons.\par
Agile model believes that every project needs to be handled\par
differentlyand the existing methods need to be tailored to best suit\par
the project requirements. In agile the tasks are divided to time boxes to deliverspecific features fora release. Iterative approach is taken and working software build is delivered  iteration. Each build is incremental in terms of features; the final build holds all the featuresrequired by the customer.\par
Agile thought process had started early in the software development nd started becoming popular with time due to itsflexibilityan adaptibilities.\par
\b Pros\par
\b0\lang9 Is a very realistic approach to software development\par
 Promotesteamwork and crosstraining?\par
 Functionality can be developed rapidly and demonstrated.\par
 Resource requirements are minimum.\par
Suitable for fixed or changing requirements\par
 Delivers earlypartial working solutions.\par
 Good model for environments that change steadily.\par
 Minimal rules, documentation easily employed.\par
 Enables concurrent development and delivery within anoverall planned context.\par
Little or no planning required Easy to manage Gives flexibility to dvelopers.\par
\b Cons\b0\par
Not suitable for handling complex dependencies.\par
 More risk of sustainability, maintainability and extensibility.\par
 An overall plan, an agile leader and agile PM practice is a must without which it will not work.\par
 Strict delivery management dictates the scope, functionality to be delivered, and adjustments to meet the deadlines.\par
Depends heavily on customer interaction, so if customer is not clear, team can be driven in the wrong direction.\par
 There is very high individual dependency, since there is minimum documentation generated.\par
 Transfer of technology to new team members may be quite challenging due to lack of documentation use \f1\endash  case\par
\par
\f0\par
}
 